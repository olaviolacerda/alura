{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","dbName","version","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","ev","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,kB,GAAS,Y;AACTC,mB,GAAU,C;AACZC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AACT,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAGsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BC,OAA9B,CAAlB;;AAEAQ,wCAAYI,eAAZ,GAA8B,cAAM;AAChCT,kDAAkBU,aAAlB,CAAgCC,GAAGC,MAAH,CAAUC,MAA1C;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,cAAM;;AAE1B,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,GAAGC,MAAH,CAAUC,MAAvB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;;AAEDE,wCAAQL,UAAR;AAEH,6BAZD;;AAcAO,wCAAYW,OAAZ,GAAsB,cAAM;;AAExBC,wCAAQC,GAAR,CAAYP,GAAGC,MAAH,CAAUO,KAAtB;;AAEAf,uCAAOO,GAAGC,MAAH,CAAUO,KAAV,CAAgBC,IAAvB;AAEH,6BAND;AAOH,yBA7BM,CAAP;AA8BH;;;kDAEoBtB,U,EAAY;AAC7BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;AACD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH;;;sDAEwB;AACrB,4BAAI7B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst dbName = 'aluraframe';\r\nconst version = 7;\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n    constructor() {\r\n        throw new Error('Não é possivel criar instâncias de ConnectionFactory');\r\n    }\r\n\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = ev => {\r\n                ConnectionFactory._createStores(ev.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = ev => {\r\n\r\n                if (!connection) {\r\n                    connection = ev.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function () {\r\n                        throw new Error('Você não pode fechar diretamente a conexão');\r\n                    };\r\n                }\r\n\r\n                resolve(connection);\r\n\r\n            };\r\n\r\n            openRequest.onerror = ev => {\r\n\r\n                console.log(ev.target.error);\r\n\r\n                reject(ev.target.error.name);\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    static _createStores(connection) {\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectStore(store);\r\n            }\r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        })\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (connection) {\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n\r\n}\r\n"]}